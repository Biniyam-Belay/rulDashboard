import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import Papa from 'papaparse';
import {
  Activity,
  AlertTriangle,
  CheckCircle,
  Clock,
  Gauge,
  LineChart,
  PlayCircle,
  StopCircle,
  TrendingUp,
  Upload,
  Zap,
  Database,
  BarChart3,
  Shield,
  Users,
  Target,
  ArrowUp,
  AlertCircle as LucideAlertCircle,
  Check
} from 'lucide-react';

import { useAssetsWithLatestRul, predictRulForAssetBulk, predictRulForAssetBulkFast } from '@/lib/api';
import type { AssetWithLatestRul } from '@/lib/types';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';

import RealTimeProgressChart from '@/components/RealTimeProgressChart';
import ProcessingStatus from '@/components/ProcessingStatus';
import RulDistributionChart from '@/components/RulDistributionChart';
import AlertsPanel from '@/components/AlertsPanel';
import RulSparkline from '@/components/RulSparkline';

const DashboardPage = () => {
  const { data, isLoading, error } = useAssetsWithLatestRul();
  const navigate = useNavigate();
  // const [sortConfig, setSortConfig] = useState<SortConfig>({ key: 'latest_rul', direction: 'ascending' });

  // File upload and processing states
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isParsing, setIsParsing] = useState(false);
  const [parsedData, setParsedData] = useState<any[] | null>(null);
  const [headerRow, setHeaderRow] = useState<string[]>([]);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [assetIdForSim, setAssetIdForSim] = useState<string>('');
  const [simulationProgress, setSimulationProgress] = useState<string>('');
  const [simulationResults, setSimulationResults] = useState<Array<{
    sequenceNumber: number;
    predictedRul: number;
    timestamp: string;
    error?: string;
  }>>([]);
  const [currentSequence, setCurrentSequence] = useState(0);
  const [totalSequences, setTotalSequences] = useState(0);
  const [simulationAbortController, setSimulationAbortController] = useState<AbortController | null>(null);
  const [batchSize, setBatchSize] = useState(30);
  const [processingMode, setProcessingMode] = useState<'fast' | 'standard'>('fast');
  const [processingStartTime, setProcessingStartTime] = useState<number | null>(null);
  const [sequencesPerSecond, setSequencesPerSecond] = useState<number>(0);
  const [advancedMode, setAdvancedMode] = useState(false);

  const SEQUENCE_LENGTH = 50;

  // Header mapping for CSV processing
  const headerMapping: { [key: string]: string } = {
    'x_direction': 'x_direction',
    'xdirection': 'x_direction',
    'x direction': 'x_direction',
    'x-direction': 'x_direction',
    'y_direction': 'y_direction',
    'ydirection': 'y_direction',
    'y direction': 'y_direction',
    'y-direction': 'y_direction',
    'bearingtem': 'bearing_tem',
    'bearingtemp': 'bearing_tem',
    'bearing_tem': 'bearing_tem',
    'bearing_temp': 'bearing_tem',
    'bearing tem': 'bearing_tem',
    'bearing temp': 'bearing_tem',
    'envtemp': 'env_temp',
    'env_temp': 'env_temp',
    'env temp': 'env_temp',
    'environment temp': 'env_temp',
    'environmenttemp': 'env_temp'
  };

  // KPI calculations
  const totalAssets = data?.length ?? 0;
  const criticalAssets = data?.filter(a => (a.latest_rul ?? Infinity) <= 20000).length ?? 0;
  const warningAssets = data?.filter(a => (a.latest_rul ?? Infinity) > 20000 && (a.latest_rul ?? 0) <= 60000).length ?? 0;
  const healthyAssets = data?.filter(a => (a.latest_rul ?? 0) > 60000).length ?? 0;

  // Processing statistics
  const completedSequences = simulationResults.filter(r => r.predictedRul !== undefined).length;
  const errorSequences = simulationResults.filter(r => r.error !== undefined).length;
  const successfulPredictions = simulationResults.filter(r => r.predictedRul !== undefined && !r.error);

  // File handling functions
  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setSelectedFile(event.target.files[0]);
      setParsedData(null);
      setUploadError(null);
      setHeaderRow([]);
      setSimulationResults([]);
      setCurrentSequence(0);
      setTotalSequences(0);
    }
  };

  const handleParseCsv = async () => {
    if (!selectedFile) {
      setUploadError('Please select a CSV file first.');
      return;
    }
    setIsParsing(true);
    setUploadError(null);
    setParsedData(null);
    setHeaderRow([]);

    Papa.parse(selectedFile, {
      header: true,
      skipEmptyLines: true,
      complete: (results) => {
        if (results.errors.length) {
          setUploadError(`Error parsing CSV: ${results.errors[0].message}`);
          setParsedData(null);
        } else {
          setHeaderRow(results.meta.fields || []);
          setParsedData(results.data);
          const numSequences = Math.floor((results.data?.length || 0) / SEQUENCE_LENGTH);
          setTotalSequences(numSequences);
        }
        setIsParsing(false);
      },
      error: (err) => {
        setUploadError(`Failed to parse CSV: ${err.message}`);
        setIsParsing(false);
        setParsedData(null);
      }
    });
  };

  const transformRow = (row: any, csvHeaders: string[]): any | null => {
    const transformed: any = {};
    const requiredBackendKeys = ['x_direction', 'y_direction', 'bearing_tem', 'env_temp'];

    for (const backendKey of requiredBackendKeys) {
      let valueSuccessfullySetForBackendKey = false;

      for (const patternFromHeaderMapping of Object.keys(headerMapping)) {
        if (headerMapping[patternFromHeaderMapping] === backendKey) {
          const normalizedPattern = patternFromHeaderMapping.toLowerCase().replace(/\s+/g, '');

          const actualCsvHeader = csvHeaders.find(h => {
            const normalizedHeader = h.toLowerCase().replace(/\s+/g, '');
            return normalizedHeader === normalizedPattern;
          });

          if (actualCsvHeader && row[actualCsvHeader] !== undefined && row[actualCsvHeader] !== null && row[actualCsvHeader] !== '') {
            const val = parseFloat(row[actualCsvHeader]);
            if (!isNaN(val)) {
              transformed[backendKey] = val;
              valueSuccessfullySetForBackendKey = true;
              break;
            }
          }
        }
      }

      if (valueSuccessfullySetForBackendKey) {
        continue;
      }

      if (row[backendKey] !== undefined && row[backendKey] !== null && row[backendKey] !== '') {
        const directVal = parseFloat(row[backendKey]);
        if (!isNaN(directVal)) {
          transformed[backendKey] = directVal;
          valueSuccessfullySetForBackendKey = true;
        }
      }

      if (!valueSuccessfullySetForBackendKey) {
        return null;
      }
    }

    return transformed;
  };

  const handleStartSimulation = async () => {
    if (!parsedData || parsedData.length < SEQUENCE_LENGTH) {
      setUploadError(`Not enough data to form a sequence. Need at least ${SEQUENCE_LENGTH} rows.`);
      return;
    }
    if (!assetIdForSim.trim()) {
      setUploadError('Please enter an Asset ID for the simulation.');
      return;
    }

    const abortController = new AbortController();
    setSimulationAbortController(abortController);

    setIsProcessing(true);
    setUploadError(null);
    setSimulationProgress('Starting simulation...');
    setSimulationResults([]);
    setCurrentSequence(0);
    setProcessingStartTime(Date.now());

    const numSequences = Math.floor(parsedData.length / SEQUENCE_LENGTH);
    setTotalSequences(numSequences);

    const BATCH_SIZE = batchSize;
    const batches = [];

    for (let i = 0; i < numSequences; i += BATCH_SIZE) {
      const batchEnd = Math.min(i + BATCH_SIZE, numSequences);
      batches.push({ start: i, end: batchEnd });
    }

    try {
      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
        if (abortController.signal.aborted) {
          throw new Error('Simulation stopped by user');
        }

        const batch = batches[batchIndex];
        setSimulationProgress(`Processing batch ${batchIndex + 1} of ${batches.length} (sequences ${batch.start + 1}-${batch.end})...`);

        const bulkSequences: any[][] = [];
        const sequenceMetadata: Array<{ sequenceNumber: number; originalIndex: number }> = [];

        for (let i = batch.start; i < batch.end; i++) {
          const sequenceStartIndex = i * SEQUENCE_LENGTH;
          const sequenceEndIndex = sequenceStartIndex + SEQUENCE_LENGTH;
          const rawSequence = parsedData.slice(sequenceStartIndex, sequenceEndIndex);

          const transformedRows = [];
          for (let j = 0; j < rawSequence.length; j++) {
            const row = rawSequence[j];
            const transformedRow = transformRow(row, headerRow);
            if (transformedRow === null) {
              continue;
            }
            transformedRows.push(transformedRow);
          }

          if (transformedRows.length !== SEQUENCE_LENGTH) {
            setSimulationResults(prev => [...prev, {
              sequenceNumber: i + 1,
              predictedRul: 0,
              timestamp: new Date().toISOString(),
              error: `Sequence ${i + 1} is incomplete after transformation`
            }]);
            continue;
          }

          bulkSequences.push(transformedRows);
          sequenceMetadata.push({ sequenceNumber: i + 1, originalIndex: i });
        }

        if (bulkSequences.length > 0) {
          try {
            const bulkResponse = processingMode === 'fast'
              ? await predictRulForAssetBulkFast(assetIdForSim, bulkSequences)
              : await predictRulForAssetBulk(assetIdForSim, bulkSequences);

            const { predictions } = bulkResponse.data;


            const newResults = predictions.map((prediction: any, index: number) => {
              const metadata = sequenceMetadata[index];
              return {
                sequenceNumber: metadata.sequenceNumber,
                predictedRul: prediction.predicted_rul > 0 ? prediction.predicted_rul : 0,
                timestamp: new Date().toISOString(),
                error: prediction.predicted_rul < 0 ? 'Prediction failed' : undefined
              };
            });

            setSimulationResults(prev => [...prev, ...newResults]);
            setCurrentSequence(batch.end);

            if (processingStartTime) {
              const elapsedSeconds = (Date.now() - processingStartTime) / 1000;
              const rate = batch.end / elapsedSeconds;
              setSequencesPerSecond(Math.round(rate * 10) / 10);
            }

          } catch (error) {
            console.error('Bulk processing error:', error);
            const errorResults = sequenceMetadata.map(metadata => ({
              sequenceNumber: metadata.sequenceNumber,
              predictedRul: 0,
              timestamp: new Date().toISOString(),
              error: `Bulk processing failed: ${(error as Error).message || 'Unknown error'}`
            }));
            setSimulationResults(prev => [...prev, ...errorResults]);
          }
        }

        if (batchIndex < batches.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      setSimulationProgress(`Simulation finished. Processed ${numSequences} sequences in ${batches.length} batches.`);
    } catch (err: any) {
      if (err.message === 'Simulation stopped by user') {
        setSimulationProgress('Simulation stopped by user.');
      } else {
        setUploadError(`Simulation failed: ${err.message}`);
        setSimulationProgress('Simulation failed.');
      }
    } finally {
      setIsProcessing(false);
      setSimulationAbortController(null);
    }
  };

  const stopSimulation = () => {
    if (simulationAbortController) {
      simulationAbortController.abort();
      setSimulationAbortController(null);
      setIsProcessing(false);
      setSimulationProgress('Simulation stopped by user.');
    }
  };

  const handleRowClick = (assetId: string | number) => {
    navigate(`/assets/${assetId}`);
  };

  return (
    <div className="min-h-screen w-full bg-[#090C14] bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-[#1A1F35]/70 via-[#0D1120] to-[#070914]">
      <div className="w-full max-w-none px-4 sm:px-6 lg:px-8 py-6 space-y-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row items-center justify-between gap-4 relative"
        >
          <div className="space-y-2 relative z-10">
            <div className="flex items-center gap-2">
              <div className="h-10 w-10 rounded-xl bg-gradient-to-br from-cyan-500 to-blue-700 flex items-center justify-center shadow-lg shadow-cyan-500/20">
                <Activity className="h-6 w-6 text-white" />
              </div>
              <div className="flex flex-col">
                <span className="text-xs font-medium text-cyan-500 uppercase tracking-wider">AI-Powered System</span>
                <h1 className="text-3xl sm:text-5xl font-extrabold bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 bg-clip-text text-transparent drop-shadow-sm">
                  RUL Analytics Dashboard
                </h1>
              </div>
            </div>
            <p className="text-sm md:text-lg text-slate-400 ml-12">Predictive maintenance using CNN-LSTM neural networks with real-time insights</p>
            <div className="absolute -top-16 -left-12 w-64 h-64 bg-blue-600/20 rounded-full filter blur-3xl opacity-20 z-0 animate-pulse"></div>
          </div>

          <div className="flex items-center gap-3 z-10">
            <Button variant="outline" className="bg-slate-900/50 border-slate-800 hover:bg-slate-800 text-slate-300 transition-all shadow-lg hover:shadow-blue-500/10" asChild>
              <RouterLink to="/alerts" className="gap-2">
                <AlertTriangle className="h-4 w-4 text-amber-400" />
                <span className="hidden md:inline">Alerts</span>
              </RouterLink>
            </Button>
            <Button variant="outline" className="bg-slate-900/50 border-slate-800 hover:bg-slate-800 text-slate-300 transition-all shadow-lg hover:shadow-blue-500/10" asChild>
              <RouterLink to="/diagnostics" className="gap-2">
                <BarChart3 className="h-4 w-4 text-cyan-400" />
                <span className="hidden md:inline">Diagnostics</span>
              </RouterLink>
            </Button>
            <Button className="bg-gradient-to-r from-blue-600 to-cyan-500 hover:from-blue-700 hover:to-cyan-600 text-white border-0 shadow-lg shadow-blue-500/20 hover:shadow-blue-600/40 transition-all">
              <Activity className="h-4 w-4 mr-2" />
              Live Monitor
            </Button>
          </div>
          <div className="absolute top-0 right-0 w-96 h-96 bg-purple-600/10 rounded-full filter blur-3xl opacity-20 z-0 hidden lg:block"></div>
        </motion.div>

        {/* KPI Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 relative"
        >
          <div className="absolute inset-0 bg-gradient-to-b from-blue-500/5 to-transparent rounded-3xl -z-10"></div>

          <Card className="border-0 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50 hover:border-blue-500/30 transition-all group">
            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-blue-600 to-cyan-500"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1 pt-5">
              <CardTitle className="text-sm font-medium text-slate-400">Total Assets</CardTitle>
              <div className="h-8 w-8 rounded-lg bg-blue-950/50 border border-blue-900/50 flex items-center justify-center group-hover:bg-blue-900/50 transition-colors">
                <Database className="h-4 w-4 text-blue-400" />
              </div>
            </CardHeader>
            <CardContent className="pb-5">
              <div className="text-3xl font-bold text-white mb-1">{totalAssets}</div>
              <div className="flex items-center">
                <span className="text-xs text-slate-400">Monitored equipment</span>
                <span className="ml-auto text-xs text-blue-400 flex items-center gap-1">
                  <ArrowUp className="h-3 w-3" />
                  <span>12%</span>
                </span>
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50 hover:border-red-500/30 transition-all group">
            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-red-600 to-rose-500"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1 pt-5">
              <CardTitle className="text-sm font-medium text-slate-400">Critical</CardTitle>
              <div className="h-8 w-8 rounded-lg bg-red-950/50 border border-red-900/50 flex items-center justify-center group-hover:bg-red-900/50 transition-colors">
                <AlertTriangle className="h-4 w-4 text-red-400" />
              </div>
            </CardHeader>
            <CardContent className="pb-5">
              <div className="text-3xl font-bold text-white mb-1">{criticalAssets}</div>
              <div className="flex items-center">
                <span className="text-xs text-slate-400">Immediate attention</span>
                <span className="ml-auto text-xs text-red-400 flex items-center gap-1">
                  <LucideAlertCircle className="h-3 w-3" />
                  <span>High priority</span>
                </span>
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50 hover:border-amber-500/30 transition-all group">
            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-amber-600 to-yellow-500"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1 pt-5">
              <CardTitle className="text-sm font-medium text-slate-400">Warning</CardTitle>
              <div className="h-8 w-8 rounded-lg bg-amber-950/50 border border-amber-900/50 flex items-center justify-center group-hover:bg-amber-900/50 transition-colors">
                <Clock className="h-4 w-4 text-amber-400" />
              </div>
            </CardHeader>
            <CardContent className="pb-5">
              <div className="text-3xl font-bold text-white mb-1">{warningAssets}</div>
              <div className="flex items-center">
                <span className="text-xs text-slate-400">Schedule maintenance</span>
                <span className="ml-auto text-xs text-amber-400 flex items-center gap-1">
                  <Clock className="h-3 w-3" />
                  <span>Medium priority</span>
                </span>
              </div>
            </CardContent>
          </Card>

          <Card className="border-0 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50 hover:border-emerald-500/30 transition-all group">
            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-emerald-600 to-green-500"></div>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-1 pt-5">
              <CardTitle className="text-sm font-medium text-slate-400">Healthy</CardTitle>
              <div className="h-8 w-8 rounded-lg bg-emerald-950/50 border border-emerald-900/50 flex items-center justify-center group-hover:bg-emerald-900/50 transition-colors">
                <CheckCircle className="h-4 w-4 text-emerald-400" />
              </div>
            </CardHeader>
            <CardContent className="pb-5">
              <div className="text-3xl font-bold text-white mb-1">{healthyAssets}</div>
              <div className="flex items-center">
                <span className="text-xs text-slate-400">Operating normally</span>
                <span className="ml-auto text-xs text-emerald-400 flex items-center gap-1">
                  <Check className="h-3 w-3" />
                  <span>Good condition</span>
                </span>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Main Content Tabs */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Tabs defaultValue="analysis" className="space-y-6">
            <div className="flex justify-center mb-2">
              <div className="px-1 py-1 bg-slate-800/50 backdrop-blur-sm rounded-xl border border-slate-700/50 shadow-xl">
                <TabsList className="grid w-full grid-cols-3 bg-transparent">
                  <TabsTrigger
                    value="analysis"
                    className="gap-2 data-[state=active]:bg-gradient-to-b data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white hover:text-white text-slate-400 rounded-lg mr-1 transition-all duration-300 shadow-inner data-[state=active]:shadow-blue-500/20"
                  >
                    <Zap className="h-4 w-4" />
                    Analysis
                  </TabsTrigger>
                  <TabsTrigger
                    value="assets"
                    className="gap-2 data-[state=active]:bg-gradient-to-b data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white hover:text-white text-slate-400 rounded-lg mr-1 transition-all duration-300 shadow-inner data-[state=active]:shadow-blue-500/20"
                  >
                    <Users className="h-4 w-4" />
                    Assets
                  </TabsTrigger>
                  <TabsTrigger
                    value="insights"
                    className="gap-2 data-[state=active]:bg-gradient-to-b data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white hover:text-white text-slate-400 rounded-lg transition-all duration-300 shadow-inner data-[state=active]:shadow-blue-500/20"
                  >
                    <TrendingUp className="h-4 w-4" />
                    Insights
                  </TabsTrigger>
                </TabsList>
              </div>
            </div>

            <TabsContent value="analysis" className="space-y-6">
              <Card className="border border-slate-800/50 shadow-xl bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden">
                <div className="absolute -top-24 -right-24 w-64 h-64 bg-blue-600/10 rounded-full filter blur-3xl opacity-20 z-0"></div>
                <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full h-1/2 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-cyan-500/5 rounded-full filter blur-3xl opacity-30 z-0"></div>
                <CardHeader className="relative z-10">
                  <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                    <div>
                      <div className="flex items-center gap-3 mb-2">
                        <div className="h-8 w-8 rounded-lg bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center shadow-lg shadow-blue-600/20">
                          <Activity className="h-5 w-5 text-white" />
                        </div>
                        <CardTitle className="text-lg font-bold text-white">AI-Powered Analysis Engine</CardTitle>
                      </div>
                      <CardDescription className="text-slate-400">
                        Upload sensor data for real-time RUL predictions using our advanced CNN-LSTM model
                      </CardDescription>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className={`px-3 py-2 ${advancedMode ? 'bg-gradient-to-r from-blue-600/20 to-purple-600/20' : 'bg-slate-800/50'} rounded-lg flex items-center gap-2 transition-all duration-300`}>
                        <Label htmlFor="advanced-mode-switch-main" className={`text-sm ${advancedMode ? 'text-blue-400' : 'text-slate-400'}`}>Advanced Mode</Label>
                        <Switch
                          id="advanced-mode-switch-main"
                          checked={advancedMode}
                          onCheckedChange={setAdvancedMode}
                          className="data-[state=checked]:bg-gradient-to-r data-[state=checked]:from-blue-600 data-[state=checked]:to-purple-600 data-[state=checked]:border-blue-900"
                        />
                      </div>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* File Upload and Processing */}
                  <Card className="border border-slate-800/50 shadow-xl bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden">
                    <div className="absolute -top-24 -right-24 w-64 h-64 bg-blue-600/10 rounded-full filter blur-3xl opacity-20 z-0"></div>
                    <CardHeader>
                      <div className="flex items-center gap-2">
                        <div className="p-2 rounded-lg bg-gradient-to-r from-blue-500 to-purple-600">
                          <Upload className="h-4 w-4 text-white" />
                        </div>
                        <div className="flex flex-col">
                          <CardTitle className="text-xl text-white/90">Data Import & Processing</CardTitle>
                          <CardDescription className="text-slate-400">Upload CSV sensor data for RUL prediction</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-5">
                        <div className="grid gap-5 md:grid-cols-2">
                          {/* File Uploader */}
                          <motion.div
                            whileHover={{ scale: 1.01 }}
                            transition={{ type: "spring", stiffness: 300 }}
                            className="relative overflow-hidden"
                          >
                            <div className="border-2 border-dashed border-slate-700/60 hover:border-blue-500/50 transition-all rounded-xl flex flex-col items-center justify-center gap-3 p-6 bg-slate-800/30">
                              <div className="p-3 bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-full backdrop-blur-sm">
                                <Upload className="h-6 w-6 text-blue-400" />
                              </div>
                              <div className="text-center">
                                <p className="font-medium text-slate-300">
                                  {selectedFile ? selectedFile.name : 'Drop CSV file or click to browse'}
                                </p>
                                <p className="text-xs text-slate-500 mt-1">
                                  Make sure it contains X/Y direction, bearing and env temp
                                </p>
                              </div>
                              <Input
                                type="file"
                                className="absolute inset-0 opacity-0 cursor-pointer"
                                accept=".csv"
                                onChange={handleFileChange}
                              />
                            </div>
                          </motion.div>

                          {/* Options Panel */}
                          <div className="space-y-5 p-4 rounded-xl bg-slate-800/20 border border-slate-700/30">
                            <div className="flex justify-between items-center">
                              <Label htmlFor="assetId" className="text-slate-300">Asset ID</Label>
                              <Input
                                id="assetId"
                                placeholder="Optional asset identifier"
                                value={assetIdForSim}
                                onChange={e => setAssetIdForSim(e.target.value)}
                                className="max-w-[200px] bg-slate-900/50 border-slate-700 text-slate-200 placeholder:text-slate-600 focus:ring-blue-500 focus:border-blue-500"
                              />
                            </div>

                            <div className="flex items-center justify-between">
                              <div className="flex space-x-2 items-center">
                                <div className="flex h-5 items-center">
                                  <Switch
                                    id="advanced-mode-switch-options"
                                    checked={advancedMode}
                                    onCheckedChange={setAdvancedMode}
                                  />
                                </div>
                                <Label htmlFor="advanced-mode-switch-options" className="text-slate-300">Advanced Options</Label>
                              </div>
                            </div>

                            {advancedMode && (
                              <motion.div
                                initial={{ height: 0, opacity: 0 }}
                                animate={{ height: 'auto', opacity: 1 }}
                                exit={{ height: 0, opacity: 0 }}
                                className="space-y-3 pt-2"
                              >
                                <div className="grid grid-cols-2 gap-4">
                                  <div className="space-y-1">
                                    <Label htmlFor="batch-size" className="text-xs text-slate-400">Batch Size</Label>
                                    <Select
                                      value={batchSize.toString()}
                                      onValueChange={(value) => setBatchSize(parseInt(value))}
                                    >
                                      <SelectTrigger className="bg-slate-900/50 border-slate-700 text-slate-300">
                                        <SelectValue placeholder="Batch Size" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-slate-900 border-slate-700 text-slate-300">
                                        <SelectItem value="10">10</SelectItem>
                                        <SelectItem value="30">30</SelectItem>
                                        <SelectItem value="50">50</SelectItem>
                                        <SelectItem value="100">100</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                  <div className="space-y-1">
                                    <Label htmlFor="processing-mode" className="text-xs text-slate-400">Processing Mode</Label>
                                    <Select
                                      value={processingMode}
                                      onValueChange={(value) => setProcessingMode(value as 'fast' | 'standard')}
                                    >
                                      <SelectTrigger className="bg-slate-900/50 border-slate-700 text-slate-300">
                                        <SelectValue placeholder="Mode" />
                                      </SelectTrigger>
                                      <SelectContent className="bg-slate-900 border-slate-700 text-slate-300">
                                        <SelectItem value="fast">Fast Processing</SelectItem>
                                        <SelectItem value="standard">Standard Quality</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                </div>
                              </motion.div>
                            )}

                            <div className="pt-2 flex flex-col gap-2">
                              <Button
                                onClick={handleParseCsv}
                                disabled={!selectedFile || isParsing}
                                className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg shadow-blue-700/20"
                              >
                                {isParsing ? (
                                  <>
                                    <div className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-t-transparent" />
                                    Parsing...
                                  </>
                                ) : 'Parse CSV'}
                              </Button>

                              {parsedData && (
                                <Button
                                  onClick={handleStartSimulation} // Corrected: was startProcessing
                                  disabled={isProcessing || !parsedData || parsedData.length === 0 || simulationAbortController !== null}
                                  className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white shadow-lg shadow-purple-700/20"
                                >
                                  <PlayCircle className="mr-2 h-4 w-4" />
                                  Start Processing
                                </Button>
                              )}

                              {isProcessing && simulationAbortController && (
                                <Button
                                  onClick={stopSimulation} // Corrected: was stopProcessing
                                  variant="destructive"
                                  className="bg-gradient-to-r from-red-600 to-rose-600 hover:from-red-700 hover:to-rose-700 text-white shadow-lg shadow-red-700/20"
                                >
                                  <StopCircle className="mr-2 h-4 w-4" />
                                  Stop Processing
                                </Button>
                              )}
                            </div>

                            {simulationProgress && (
                              <div className="p-3 bg-slate-800/60 border border-slate-700/50 rounded-md">
                                <p className="text-sm text-blue-400">{simulationProgress}</p>
                              </div>
                            )}
                          </div>
                        </div>

                        {uploadError && (
                          <motion.div
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="p-3 bg-red-900/20 border border-red-800/30 rounded-md"
                          >
                            <p className="text-sm text-red-400">{uploadError}</p>
                          </motion.div>
                        )}

                        {/* Data Preview */}
                        {parsedData && (
                          <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            className="space-y-3"
                          >
                            <Separator className="bg-slate-700/30" />
                            <div className="flex items-center gap-2">
                              <Database className="h-4 w-4 text-blue-500" />
                              <h4 className="font-medium text-blue-100">Data Preview</h4>
                            </div>
                            <div className="overflow-hidden rounded-lg border border-slate-700/50 bg-slate-800/30">
                              <div className="overflow-x-auto max-h-40 scrollbar-thin scrollbar-thumb-slate-700 scrollbar-track-slate-900/30">
                                <table className="w-full text-sm">
                                  <thead className="bg-slate-800/70">
                                    <tr>
                                      {headerRow.slice(0, 6).map((header, index) => (
                                        <th key={index} className="px-3 py-2 text-left font-medium text-slate-300">
                                          {header}
                                        </th>
                                      ))}
                                      {headerRow.length > 6 && (
                                        <th className="px-3 py-2 text-left font-medium text-slate-400">...</th>
                                      )}
                                    </tr>
                                  </thead>
                                  <tbody className="divide-y divide-slate-700/30">
                                    {parsedData.slice(0, 5).map((row, rowIndex) => (
                                      <tr key={rowIndex} className="hover:bg-slate-700/20">
                                        {headerRow.slice(0, 6).map((header, colIndex) => (
                                          <td key={colIndex} className="px-3 py-2 text-slate-300">
                                            {typeof row[header] === 'number'
                                              ? Number(row[header]).toFixed(3)
                                              : row[header]
                                            }
                                          </td>
                                        ))}
                                        {headerRow.length > 6 && (
                                          <td className="px-3 py-2 text-slate-500">...</td>
                                        )}
                                      </tr>
                                    ))}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </motion.div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                  {/* Processing Results */}
                  {simulationResults.length > 0 && (
                    <AnimatePresence>
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="space-y-6"
                      >
                        {/* Enhanced KPIs */}
                        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                          <Card className="border-0 shadow-lg border border-slate-800/50 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm overflow-hidden group hover:border-purple-500/50 transition-all duration-300">
                            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-purple-600 to-purple-400"></div>
                            <div className="absolute -top-12 -right-12 w-32 h-32 bg-purple-500/10 rounded-full filter blur-3xl opacity-60 group-hover:opacity-100 transition-opacity"></div>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <p className="text-sm font-medium text-purple-400">Avg RUL</p>
                                  <p className="text-2xl font-bold text-white">
                                    {successfulPredictions.length > 0
                                      ? (successfulPredictions.reduce((sum, p) => sum + p.predictedRul, 0) / successfulPredictions.length).toFixed(0)
                                      : '0'
                                    }
                                  </p>
                                </div>
                                <div className="p-2 rounded-lg bg-purple-500/10">
                                  <Target className="h-5 w-5 text-purple-400" />
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          <Card className="border-0 shadow-lg border border-slate-800/50 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm overflow-hidden group hover:border-indigo-500/50 transition-all duration-300">
                            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-indigo-600 to-indigo-400"></div>
                            <div className="absolute -top-12 -right-12 w-32 h-32 bg-indigo-500/10 rounded-full filter blur-3xl opacity-60 group-hover:opacity-100 transition-opacity"></div>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <p className="text-sm font-medium text-indigo-400">Min RUL</p>
                                  <p className="text-2xl font-bold text-white">
                                    {successfulPredictions.length > 0
                                      ? Math.min(...successfulPredictions.map(p => p.predictedRul)).toFixed(0)
                                      : '0'
                                    }
                                  </p>
                                </div>
                                <div className="p-2 rounded-lg bg-indigo-500/10">
                                  <Shield className="h-5 w-5 text-indigo-400" />
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          <Card className="border-0 shadow-lg border border-slate-800/50 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm overflow-hidden group hover:border-cyan-500/50 transition-all duration-300">
                            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-cyan-600 to-cyan-400"></div>
                            <div className="absolute -top-12 -right-12 w-32 h-32 bg-cyan-500/10 rounded-full filter blur-3xl opacity-60 group-hover:opacity-100 transition-opacity"></div>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <p className="text-sm font-medium text-cyan-400">Max RUL</p>
                                  <p className="text-2xl font-bold text-white">
                                    {successfulPredictions.length > 0
                                      ? Math.max(...successfulPredictions.map(p => p.predictedRul)).toFixed(0)
                                      : '0'
                                    }
                                  </p>
                                </div>
                                <div className="p-2 rounded-lg bg-cyan-500/10">
                                  <TrendingUp className="h-5 w-5 text-cyan-400" />
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          <Card className="border-0 shadow-lg border border-slate-800/50 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm overflow-hidden group hover:border-emerald-500/50 transition-all duration-300">
                            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-emerald-600 to-emerald-400"></div>
                            <div className="absolute -top-12 -right-12 w-32 h-32 bg-emerald-500/10 rounded-full filter blur-3xl opacity-60 group-hover:opacity-100 transition-opacity"></div>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <p className="text-sm font-medium text-emerald-400">Progress</p>
                                  <p className="text-2xl font-bold text-white">
                                    {totalSequences > 0
                                      ? ((completedSequences / totalSequences) * 100).toFixed(1)
                                      : '0'
                                    }%
                                  </p>
                                </div>
                                <div className="p-2 rounded-lg bg-emerald-500/10">
                                  <Gauge className="h-5 w-5 text-emerald-400" />
                                </div>
                              </div>
                            </CardContent>
                          </Card>

                          <Card className="border-0 shadow-lg border border-slate-800/50 bg-[rgba(16,23,42,0.7)] backdrop-blur-sm overflow-hidden group hover:border-orange-500/50 transition-all duration-300">
                            <div className="absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-orange-600 to-orange-400"></div>
                            <div className="absolute -top-12 -right-12 w-32 h-32 bg-orange-500/10 rounded-full filter blur-3xl opacity-60 group-hover:opacity-100 transition-opacity"></div>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <p className="text-sm font-medium text-orange-400">Speed</p>
                                  <p className="text-2xl font-bold text-white">
                                    {sequencesPerSecond.toFixed(1)} seq/s
                                  </p>
                                </div>
                                <div className="p-2 rounded-lg bg-orange-500/10">
                                  <Activity className="h-5 w-5 text-orange-400" />
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        </div>

                        {/* Enhanced Charts Section */}
                        <div className="space-y-6">
                          {/* Real-Time Progress Chart - Prominent Top Position */}
                          <Card className="border-0 shadow-2xl bg-gradient-to-br from-blue-50 via-white to-purple-50 backdrop-blur-sm">
                            <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg">
                              <CardTitle className="flex items-center justify-between text-xl">
                                <div className="flex items-center gap-3">
                                  <LineChart className="h-6 w-6" />
                                  Real-Time RUL Predictions
                                </div>
                                <Badge variant="secondary" className="bg-white/20 text-white">
                                  Live
                                </Badge>
                              </CardTitle>
                              <CardDescription className="text-blue-100">
                                Monitor RUL predictions as they are generated in real-time
                              </CardDescription>
                            </CardHeader>
                            <CardContent className="p-6">
                              <div className="h-96 lg:h-[500px]">
                                <RealTimeProgressChart
                                  data={successfulPredictions}
                                  isProcessing={isProcessing}
                                />
                              </div>
                            </CardContent>
                          </Card>

                          {/* Secondary Charts Row */}
                          <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
                            {/* RUL Distribution Chart */}
                            {successfulPredictions.length > 0 && (
                              <Card className="border-0 shadow-xl bg-gradient-to-br from-purple-50 via-white to-pink-50 backdrop-blur-sm">
                                <CardHeader className="bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-t-lg">
                                  <CardTitle className="flex items-center gap-3">
                                    <BarChart3 className="h-5 w-5" />
                                    RUL Distribution Analysis
                                  </CardTitle>
                                  <CardDescription className="text-purple-100">
                                    Distribution of predicted remaining useful life values
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-6">
                                  <div className="h-80 lg:h-96">
                                    <RulDistributionChart predictions={successfulPredictions} />
                                  </div>
                                </CardContent>
                              </Card>
                            )}

                            {/* Live Alerts Panel */}
                            <Card className="border-0 shadow-xl bg-gradient-to-br from-red-50 via-white to-orange-50 backdrop-blur-sm">
                              <CardHeader className="bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-t-lg">
                                <CardTitle className="flex items-center gap-3">
                                  <AlertTriangle className="h-5 w-5" />
                                  Critical Alerts
                                </CardTitle>
                                <CardDescription className="text-red-100">
                                  Real-time alerts for critical RUL thresholds
                                </CardDescription>
                              </CardHeader>
                              <CardContent className="p-6">
                                <AlertsPanel predictions={successfulPredictions} />
                              </CardContent>
                            </Card>
                          </div>

                          {/* Processing Status - Full Width at Bottom */}
                          <Card className="border-0 shadow-xl bg-gradient-to-br from-emerald-50 via-white to-teal-50 backdrop-blur-sm">
                            <CardHeader className="bg-gradient-to-r from-emerald-600 to-teal-600 text-white rounded-t-lg">
                              <CardTitle className="flex items-center gap-3">
                                <Activity className="h-5 w-5" />
                                Processing Status & Performance
                              </CardTitle>
                              <CardDescription className="text-emerald-100">
                                Monitor the analysis progress and system performance
                              </CardDescription>
                            </CardHeader>
                            <CardContent className="p-6">
                              <ProcessingStatus
                                currentSequence={currentSequence}
                                totalSequences={totalSequences}
                                isProcessing={isProcessing}
                                completedSequences={completedSequences}
                                errorSequences={errorSequences}
                              />
                            </CardContent>
                          </Card>
                        </div>
                      </motion.div>
                    </AnimatePresence>
                  )}
                </TabsContent>

                <TabsContent value="assets">
                  {/* Assets table content with dark theme styling */}
                  <Card className="border-0 shadow-xl bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2 text-white">
                        <Users className="h-5 w-5 text-cyan-400" />
                        Asset Overview
                      </CardTitle>
                      <CardDescription className="text-slate-400">
                        Monitor all your equipment with real-time health status
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {isLoading ? (
                        <div className="flex items-center justify-center py-12">
                          <Activity className="h-8 w-8 animate-spin text-cyan-400" />
                          <span className="ml-2 text-slate-300">Loading assets...</span>
                        </div>
                      ) : error ? (
                        <div className="text-red-400">Error loading assets.</div>
                      ) : data && data.length > 0 ? (
                        <div className="overflow-x-auto">
                          <table className="min-w-full divide-y divide-slate-700">
                            <thead className="bg-slate-800">
                              <tr>
                                {/* Add table headers here, e.g., Asset ID, RUL, Status */}
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Asset ID</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Latest RUL</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Status</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-slate-300 uppercase tracking-wider">Last Update</th>
                              </tr>
                            </thead>
                            <tbody className="bg-slate-900 divide-y divide-slate-800">
                              {data.map((asset) => (
                                <tr key={asset.id} onClick={() => handleRowClick(asset.id)} className="hover:bg-slate-700/50 cursor-pointer">
                                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-sky-400">{asset.id}</td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-300">{asset.latest_rul?.toLocaleString() ?? 'N/A'}</td>
                                  <td className="px-6 py-4 whitespace-nowrap">
                                    <RulSparkline assetId={asset.id} />
                                    {/* Simplified status badge, actual logic might be more complex */}
                                    <Badge variant={(asset.latest_rul ?? Infinity) <= 20000 ? "destructive" : (asset.latest_rul ?? Infinity) <= 60000 ? "secondary" : "default"} className="ml-2">
                                      {(asset.latest_rul ?? Infinity) <= 20000 ? "Critical" : (asset.latest_rul ?? Infinity) <= 60000 ? "Warning" : "Healthy"}
                                    </Badge>
                                  </td>
                                  <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-400">{asset.latest_prediction_timestamp ? new Date(asset.latest_prediction_timestamp).toLocaleString() : 'N/A'}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      ) : (
                        <div className="text-center py-12 text-slate-500">No assets found.</div>
                      )}
                    </CardContent>
                  </Card>
                </TabsContent>

                <TabsContent value="insights">
                  <Card className="border-0 shadow-xl bg-[rgba(16,23,42,0.7)] backdrop-blur-sm rounded-xl overflow-hidden border border-slate-800/50">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2 text-white">
                        <TrendingUp className="h-5 w-5 text-purple-400" />
                        Advanced Insights & Trends
                      </CardTitle>
                      <CardDescription className="text-slate-400">
                        Deeper analysis of asset performance and predictive maintenance trends.
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p className="text-slate-300 py-8 text-center">Insights and trend analysis features are under development. Check back soon!</p>
                      {/* Placeholder for future charts or data visualizations */}
                    </CardContent>
                  </Card>
                </TabsContent>

              </Tabs>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashboardPage;
